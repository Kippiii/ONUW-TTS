function onLoad()
    math.randomseed(os.time())
    generateRoleList()
end

--Generates the role list
function generateRoleList()
	table.insert(possibleRoles, Sentinel:new())
    table.insert(possibleRoles, Doppelganger:new())
    table.insert(possibleRoles, Werewolf:new())
    table.insert(possibleRoles, Werewolf:new())
	table.insert(possibleRoles, AlphaWolf:new())
	table.insert(possibleRoles, MysticWolf:new())
    table.insert(possibleRoles, Minion:new())
    table.insert(possibleRoles, Mason:new())
    table.insert(possibleRoles, Mason:new())
    table.insert(possibleRoles, Seer:new())
	table.insert(possibleRoles, ApprenticeSeer:new())
	table.insert(possibleRoles, PI:new())
    table.insert(possibleRoles, Robber:new())
	table.insert(possibleRoles, Witch:new())
    table.insert(possibleRoles, Troublemaker:new())
	table.insert(possibleRoles, VillageIdiot:new())
    table.insert(possibleRoles, Drunk:new())
    table.insert(possibleRoles, Insomniac:new())
	table.insert(possibleRoles, Revealer:new())
    table.insert(possibleRoles, Villager:new())
    table.insert(possibleRoles, Villager:new())
    table.insert(possibleRoles, Villager:new())
    table.insert(possibleRoles, Hunter:new())
    table.insert(possibleRoles, Tanner:new())
	table.insert(possibleRoles, DreamWolf:new())
	table.insert(possibleRoles, BodyGuard:new())

    local roleSelectorString = "<GridLayout id='roleSelectorLayout' width='800' height='" .. (math.ceil(arrLength(possibleRoles) / 4) * 200) .. "' cellSize='200 200'>"
    for index, role in ipairs(possibleRoles) do
        roleSelectorString = roleSelectorString .. "<Panel><Image rectAlignment='MiddleCenter' id='" .. role.name .. index .. "' class='role' image='" .. role.name .. "' color='#808080' onclick='roleSelect(" .. index .. ")' /></Panel>"
    end
	roleSelectorString = roleSelectorString .. "</GridLayout>"
    replaceInUI("<Text>RoleSelector!</Text>", roleSelectorString)
end

--Generates XML elements of every type for all players
function generateAllXml()
    local xmlToAdd = ""

    --Display roles
    for color in pairs(Game.players) do
        local player = Game.players[color]
        xmlToAdd = xmlToAdd .. "<VerticalLayout id='" .. color .. "Role' class='playerRole' visibility='" .. color .. "'>"
            xmlToAdd = xmlToAdd .. "<Panel class='readyPanel'><ToggleButton id='ready" .. color .. "' class='ready'></ToggleButton></Panel>"
            xmlToAdd = xmlToAdd .. "<Panel class='cardPanel'><Image id='" .. color .. "card' class='playerCard' image='" .. player.role.name .. " Card' class='card' /></Panel>"
            xmlToAdd = xmlToAdd .. "<Text id='" .. color .. "Description' class='description'>" .. player.role.description .. "</Text>"
        xmlToAdd = xmlToAdd .. "</VerticalLayout>"
    end

    --Generate player Xmls
    for color, player in pairs(Game.players) do
        xmlToAdd = xmlToAdd .. player:generateXml()
    end

    --Generate role Xmls
    for color, player in pairs(Game.players) do
        xmlToAdd = xmlToAdd .. player.role:generateXml()
    end

    --Generate prenight timer
    xmlToAdd = xmlToAdd .. "\n<Panel id='prenightTimer' class='timer' active='false'>" ..
        "<Text id='prenightTime' class='time'>20</Text>" ..
    "</Panel>"

    --Generate night timer
    xmlToAdd = xmlToAdd .. "\n<Panel id='nightTimer' class='timer' active='false'>" ..
        "<Text id='nightTime' class='time'>30</Text>" ..
    "</Panel>"

    --Generate voting
    xmlToAdd = xmlToAdd .. "<Panel id='voteSwitch' class='voteSwitch' active='false'>" ..
        "<Button class='voteSwitchButton'></Button>" ..
    "</Panel>"
    for color, player in pairs(Game.players) do
        xmlToAdd = xmlToAdd .. "<GridLayout id='" .. color .. "Voting' class='Voting' active='false' visibility='" .. color .. "'>" ..
            "<Text class='votingText'></Text>"
        for color2, player2 in pairs(Game.players) do
            if color2 ~= color then
                xmlToAdd = xmlToAdd .. "<Panel color='" .. color2 .. "' onClick='vote(" .. color2 .. ")'><Text id='" .. color .. "Vote" .. color2 .. "' color='Black' fontSize='25'>" .. Player[color2].steam_name .. "</Text></Panel>"
            end
        end
        xmlToAdd = xmlToAdd .. "</GridLayout>"
    end

    --Generate claims
    xmlToAdd = xmlToAdd .. "<GridLayout id='claimSelector' class='claimSelector' active='false'>"
        for i, role in ipairs(Game.roles) do
            xmlToAdd = xmlToAdd .. "<Panel><Image id='Claim" .. role.name .. i .. "' class='role' image='" .. role.name .. "' onclick='claimSelect(" .. i .. ")' /></Panel>"
        end
    xmlToAdd = xmlToAdd .. "</GridLayout>"

    self.UI.setXml(self.UI.getXml() .. xmlToAdd)
end

--Starts the game
function start(player)
    --Deciding whether the game can start
    if not player.promoted and not player.host then return end
    startingString = canStart(player)
    if startingString ~= nil then
        broadcastToColor(startingString, player.color, {100, 0, 0})
        return
    end

    --Hiding UI elements
    self.UI.setAttribute("startButton", "active", "false")
    self.UI.setAttribute("roleSelectorSwitch", "active", "false")
    self.UI.setAttribute("roleSelector", "active", "false")

	if debug then
		self.UI.setAttribute('debuggerSwitch', "active", "true")
	end

    --Generating the role list
    local roleList = "[0000ff]Role List:\n\n"
    for _, role in ipairs(possibleRoles) do
        if role.selected then
            table.insert(Game.roles, role)

            local color = "D3D3D3"
            if role.team == "Village" then
                color = "008000"
            elseif role.team == "Werewolves" then
                color = "A52A2A"
            end
            roleList = roleList .. "[" .. color .. "]" .. role.name .. "\n"
        end
    end
    Notes.setNotes(roleList)

    --Adding all players to the game
    for _, player in pairs(Player.getPlayers()) do
        if player.color ~= "Grey" and player.color ~= "Black" then
            Game.players[player.color] = MyPlayer:new({color=player.color})
        end
    end

    --Giving each player a role
    local tempRoles = {}
    for _, role in ipairs(Game.roles) do
        table.insert(tempRoles, role)
    end
    for color in pairs(Game.players) do
        local player = Game.players[color]
        local  random = math.random(arrLength(tempRoles))
        player:setRole(tempRoles[random])
        table.remove(tempRoles, random)
    end
    for i = 1, 3 do
        local random = math.random(arrLength(tempRoles))
        table.insert(Game.centerRoles, tempRoles[random])
        table.remove(tempRoles,random)
    end

    --Spawning all player cards
    for color, player in pairs(Game.players) do
        player:generateCard()
    end

    --Spawning all center cards
    for i = 1, 3 do
        local delta = 5
        spawnCenterCard({x=(-1 * delta) + ((i - 1) * delta), y=0.5, z=0}, {x=0, y=0, z=0})
    end

    --Adding support for Alpha Wolf
    local fourthCenter = false
    for _, role in ipairs(Game.roles) do
        if role.name == "Alpha Wolf" then
            fourthCenter = true
            break
        end
    end
    if fourthCenter then
        --Adding alpha wolf card
        spawnCenterCard({x=0, y=0.5, z=5}, {x=0, y=90, z=0})
        Game.centerRoles[4] = HiddenWolf:new()
    end

    Wait.time(generateAllXml, 0.25)
end

--Runs everytime someone click ready
function ready(player, status)
    if Game.state == "JOIN" then
        if not debugReady then
            Game.players[player.color]:toggleReady(status)
            --Checks if everyone is ready
            for color in pairs(Game.players) do
                if not Game.players[color].ready then
                    return
                end
            end
        end

        --More support for Alpha Wolf
        local fourthCenter = false
        for _, role in ipairs(Game.roles) do
            if role.name == "Alpha Wolf" then
                fourthCenter = true
                break
            end
        end
        if fourthCenter then
            for color, player in pairs(Game.players) do
                self.UI.setAttribute(color .. "CenterCardsAW", "active", 'true')
                self.UI.setAttribute(color .. "CenterCards", "height", "800")
            end
        end

        --Checks if there should be a prenight phase
        local prenight = false
        for i, role in ipairs(Game.roles) do
            if role.prenight then
                prenight = true
                break
            end
        end
        if not prenight then
            startNightPhase()
        else
            startPrenight()
        end
        nightBlind()
    end
end

--Runs at the beginning of Prenight
function startPrenight()
	broadcastToAll("The Prenight Phase has begun!", "Blue") --TODO More specific messages
	Game.state = "PRENIGHT"

	--Generates the prenight roles list
	local prenightRoles = {}
    for i, role in ipairs(Game.roles) do
		if role.prenight then
			table.insert(prenightRoles, role)
		end
	end
	for i = 1, arrLength(prenightRoles) do
        local lowestIndex = i
        for j = i + 1, arrLength(prenightRoles) do
            if getRoleNumber(prenightRoles[j]) < getRoleNumber(prenightRoles[lowestIndex]) then
                lowestIndex = j
            end
        end
        local temp = prenightRoles[lowestIndex]
        prenightRoles[lowestIndex] = prenightRoles[i]
        prenightRoles[i] = temp
    end
	Game.prenightRoles = prenightRoles

    --TODO Double-check that this code change works.
	--Begins the first person's prenight
	self.UI.setAttribute(Game.prenightRoles[1].color .. "Role", "active", "false")
	Game.prenightRoles[1]:beginPrenight()

	self.UI.setAttribute("prenightTimer", "active", "true")
	self.UI.setValue("prenightTime", Game.prenightRoles[1].prenightTime)
	timer("prenightTime", continuePrenight)
end

--Runs after every person is done with their prenight action
function continuePrenight()
	self.UI.setAttribute(Game.prenightRoles[1].color .. "Role", "active", 'true')
	Game.prenightRoles[1]:endPrenight()
	table.remove(Game.prenightRoles, 1)
	if arrLength(Game.prenightRoles) < 1 then
        self.UI.setAttribute("prenightTimer", "active", "false")
		startNightPhase()
		return
	end
    --TODO Same for this one as above
    --TODO Copy-and-pasted code
    self.UI.setAttribute(Game.prenightRoles[1].color .. "Role", "active", "false")
	Game.prenightRoles[1]:beginPrenight()			player.role.beginPrenight()

	self.UI.setValue("prenightTime", Game.prenightRoles[1].prenightTime)
	timer("prenightTime", continuePrenight)
end

--Runs at the beginning of the night phase
function startNightPhase()
    broadcastToAll("The night phase has begun!", "Grey")
    Game.state = "NIGHT"
    for color in pairs(Game.players) do
        self.UI.setAttribute(color .. "Role", "active", "false")
        Game.players[color].role:startNightAbility()
    end
    self.UI.setAttribute("nightTimer", "active", "true")
    timer("nightTime", endNight)
end

--Runs at the end of the night phase
function endNight()
    broadcastToAll("The night phase has ended!", "Grey")

    --Sorting so roles go in proper order
    local playerList = {}
    for color, player in pairs(Game.players) do
        table.insert(playerList, player.role)
    end
    for i = 1, arrLength(playerList) do
        local lowestIndex = i
        for j = i + 1, arrLength(playerList) do
            if getRoleNumber(playerList[j]) < getRoleNumber(playerList[lowestIndex]) then
                lowestIndex = j
            end
        end
        local temp = playerList[lowestIndex]
        playerList[lowestIndex] = playerList[i]
        playerList[i] = temp
    end

    for i, role in ipairs(playerList) do
        role:endNight()
    end

    Game.state = "DAY"
    for color in pairs(Game.players) do
        Player[color].blindfolded = false
    end

    self.UI.setAttribute("claimSwitch", "active", "true")
    self.UI.setAttribute("nightTimer", "active", "false")
    self.UI.setAttribute("voteSwitch", "active", "true")

    Game.clock = getObjectFromGUID("cabd89") --TODO Make it a global variable?
    Game.clock.call("startTimer")

    for color, player in pairs(Game.players) do
        player.cardUI.UI.setAttribute(color .. "ReadyImage", 'image', "Red Light")
    end

	--Support for force vote debug
	if debug then
		function addForceVote()
			xmlToAdd = ""
			for _, player in pairs(Game.players) do
				xmlToAdd = xmlToAdd .. "<Panel color='" .. player.color .. "' onClick='forceVoteSelect(" .. player.color .. ")'><Text color='Black' fontSize='25'>" .. player.player.steam_name .. "</Text></Panel>"
			end
			replaceInUI("<Text>ForceVote!</Text>", xmlToAdd)
		end
		Wait.time(addForceVote, 0.25)
	end
end

--Runs when a vote is ready to be called
function callVote()
    self.UI.setAttribute("voteSwitch", "active", "false")
    self.UI.setAttribute("claimSelector", "active", "false")
    self.UI.setAttribute("claimSwitch", "active", "false")
    local everyoneVoted = true
    for color, player in pairs(Game.players) do
        if player.vote == "" then
            everyoneVoted = false
        end
    end

    if not everyoneVoted then
        for color, player in pairs(Game.players) do
            self.UI.setAttribute(color .. "Voting", "active", 'true')
        end
        return
    end

    for color, player in pairs(Game.players) do
        Game.votes[color] = 0
    end
    for color, player in pairs(Game.players) do
        Game.votes[player.vote] = Game.votes[player.vote] + 1
    end
    local highestVotes = {}
    local highestVote = -1
    for color, votes in pairs(Game.votes) do
        if votes > highestVote then
            highestVotes = {}
            highestVote = votes
            table.insert(highestVotes, color)
        elseif votes == highestVote then
            table.insert(highestVotes, color)
        end
    end
    Game.dead = highestVotes
    for color, player in pairs(Game.players) do
        player.role:voteAbility()
    end

    local playerCount = 0
    for _,_ in pairs(Game.players) do
        playerCount = playerCount + 1
    end
    if arrLength(Game.dead) == playerCount then
        Game.dead = {}
    end

    endGame()
end

--Runs at the end of the game
function endGame()
    local deadCount = arrLength(Game.dead)
    if deadCount == 0 then
        broadcastToAll("No one has died!", "Green")
    elseif deadCount == 1 then
        broadcastToAll(Game.dead[1] .. " has been killed!", "Green")
    elseif deadCount == 2 then
        broadcastToAll(Game.dead[1] .. " and " .. Game.dead[2] .. " have been killed!", "Green")
    else
        local deathMsg = ""
        for i = 1, deadCount - 1 do
            deathMsg = deathMsg .. Game.dead[i] .. ", "
        end
        deathMsg = deathMsg .. " and " .. Game.dead[deadCount] .. " have been killed!"
        broadcastToAll(deathMsg, "Green")
    end

    Game.clock.Clock.pauseStart()

    for color in pairs(Game.players) do
        self.UI.setAttribute(color .. "Voting", "active", "false")
    end

    --Declaring the winning teams
    local werewolfInPlay = false
    for color, player in pairs(Game.players) do
        if player.endRole.werewolf then
            werewolfInPlay = true
            break
        end
    end
    local deadTanner = false
    for i, color in ipairs(Game.dead) do
        if Game.players[color].endRole.team == "Tanner" or Game.players[color].endRole.team == "doppleTanner" or Game.players[color].endRole.team == "PITanner" then
            table.insert(Game.winningTeams, Game.players[color].endRole.team)
            deadTanner = true
        end
    end
    if werewolfInPlay then
        local deadWerewolf = false
        for i, color in ipairs(Game.dead) do
            if Game.players[color].endRole.werewolf then
                deadWerewolf = true
                break
            end
        end
        if deadWerewolf then
            table.insert(Game.winningTeams, "Village")
        elseif not deadTanner then
            table.insert(Game.winningTeams, "Werewolves")
        end
    else
        if deadCount == 0 then
            table.insert(Game.winningTeams, "Village")
            table.insert(Game.winningTeams, "Werewolves")
        end
    end

    --Raise winning cards and draws votes
    local vectors = {}
    for color, player in pairs(Game.players) do
        local object = player.cardUI
        if player.hasWon() then
            object.UI.setXml("<Panel width='300' height='400' position='0 1000 -500' rotation='45 0 180' scale='3 3' id='card'><Image image='" .. player.endRole.name .. " Card' /></Panel>")
        else
            object.UI.setXml("<Panel width='300' height='400' position='0 1000 -50' id='card'><Image image='" .. player.endRole.name .. " Card' /></Panel>")
        end

        local vote = player.vote
        local vector = {
            points = { {Player[color].getHandTransform().position.x, 1, Player[color].getHandTransform().position.z}, {lineEndLocations[vote].position.x, 1.5, lineEndLocations[vote].position.z} },
            color = color,
            thickness = 0.5
        }
        table.insert(vectors, vector)
    end
    Global.setVectorLines(vectors)

    for i, object in ipairs(Game.centerRoleCards) do
        object.UI.setXml("<Panel width='300' height='400' position='0 0 -50' id='back'><Image image='" .. Game.centerRoles[i].name .. " Card' /></Panel>")
    end
end
