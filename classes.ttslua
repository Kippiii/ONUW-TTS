--Class for a Player
MyPlayer = inherit(nil)
MyPlayer.color = ''
--MyPlayer.player = {}  TODO Fix this removal!
MyPlayer.roleSelector = false --TODO Remove this functionality?
MyPlayer.claimSelector = false --TODO Remove this functionality?
MyPlayer.role = {}
MyPlayer.endRole = {} --TODO Different system?
MyPlayer.ready = false --TODO More specific?
MyPlayer.cardUI = {}
MyPlayer.vote = ''
MyPlayer.claim = ''
MyPlayer.disconnected = false
MyPlayer.protected = false --TODO Can this be made more Sentinel-sided?
function MyPlayer.constructor(this, args)
    color = args.color
    this.color = color
    --this.player = Player[color]
end
function MyPlayer.revealRole(this, color, role)
    this.cardUI.UI.setAttribute(color .. "Image", 'image', role.name .. ' Card')
end
function MyPlayer.setRole(this, role)
    this.role = role
    this.role.color = this.color
    this.endRole = table.clone(this.role)
end
function MyPlayer.generateCard(this)
    local object = spawnObject({type="Checker_white", position=cardLocation[this.color].position, rotation=cardLocation[this.color].rotation, sound=false, callback_function=setupCard}) --TODO Position based on hand location

    function setupCard() --TODO Add defaults
        local xmlToAdd = ""
        for _, color in pairs(Player.getColors()) do
            if color == this.color then
                xmlToAdd = xmlToAdd .. "<Panel width='300' height='400' position='0 1000 0' visibility='" .. color .. "' id='" .. color .. "'><Image id='" .. color .. "Image' image='" .. Game.players[color].role.name .. " Card' /><Image id='" .. color .. "Sentinel' image='Sentinel Token' visibility=' ' /></Panel>"
            else
                xmlToAdd = xmlToAdd .. "<Panel width='300' height='400' position='0 1000 0' visibility='" .. color .. "' id='" .. color .. "'><Image id='" .. color .. "Image' image='Back' /><Image id='" .. color .. "Sentinel' width='100' height='100' image='Sentinel Token' visibility=' ' /></Panel>"
            end
        end
        xmlToAdd = xmlToAdd .. "<Panel id='" .. this.color .. "Claim' width='800' height='800' position='0 -750 -1300' rotation='90 0 180' visibility=' '><Image id='" .. this.color .. "ClaimImage' /></Panel>" ..
        "<Panel id='" .. this.color .. "ClaimMini' width='300' height='300' position='0 1350 0' visibility=' '><Image id='" .. this.color .. "ClaimMiniImage' /></Panel>" ..
        "<Panel id='" .. this.color .. "Ready' width='150' height='150' position='0 650 0' visibility=''><Image id='" .. this.color .. "ReadyImage' image='Red Light' /></Panel>"

        this.cardUI = object
        this.cardUI.setInvisibleTo(Player.getColors())
        this.cardUI.setLock(true)
        this.cardUI.UI.setXml(xmlToAdd)
    end
end
function MyPlayer.hasWon(this)
    for i, team in ipairs(Game.winningTeams) do
        if this.endRole.team == team then
            return true
        end
    end
    return false
end
function MyPlayer.generateXml(this)
    local xmlToAdd = ""

    xmlToAdd = xmlToAdd .. "<GridLayout id='" .. this.color .. "PlayerSelector' class='PlayerSelector' visibility='" .. this.color .. "' active='false'>" ..
        "<Text id='" .. this.color .. "PlayerSelectorInstructions' class='PlayerSelectorInstructions'>Default Text</Text>"
    for color, player in pairs(Game.players) do
        if color ~= this.color then
            xmlToAdd = xmlToAdd .. "<Panel id='" .. this.color .. "PlayerSelector" .. color .. "Panel' color='" .. color .. "' onClick='playerNightClick(" .. color .. ")'>" ..
                "<Image id='" .. this.color .. "PlayerSelector" .. color .. "Sentinel' class='PlayerSelectorSentinel' active='false' />" ..
                "<Text id='" .. this.color .. "PlayerSelector" .. color .. "' class='PlayerSelectorColor'>" .. player.player.steam_name .. "</Text>" ..
            "</Panel>"
        else
            xmlToAdd = xmlToAdd .. "<Panel id='" .. this.color .. "PlayerSelector" .. this.color .. "Panel' color='" .. this.color .. "' onClick='playerNightClick(" .. this.color .. ")' active='false'>" ..
                "<Image id='" .. this.color .. "PlayerSelector" .. this.color .. "Sentinel' class='PlayerSelectorSentinel' active='false' />" ..
                "<Text id='" .. this.color .. "PlayerSelector" .. this.color .. "' class='PlayerSelectorColor'>" .. this.player.steam_name .. "</Text>" ..
            "</Panel>"
        end
    end
    xmlToAdd = xmlToAdd .. "</GridLayout>"

    xmlToAdd = xmlToAdd .. "<TableLayout id='" .. this.color .. "CenterCards' class='CenterCards' active='false'>" ..
        "<Row preferredHeight='100'><Cell columnSpan='3'><Panel><Text id='" .. this.color .. "CenterCardsInstructions' class='CenterCardsInstructions'>Default text</Text></Panel></Cell></Row>" ..
        "<Row id='" .. this.color .."CenterCardsAW' preferredHeight='300' active='false'><Cell columnSpan='3'><Panel><Image id='" .. this.color .. "CenterCardsMiddleCard4' class='CenterCardsMiddleCard4' /></Panel></Cell></Row>" ..
        "<Row preferredHeight='400'>"
            for i= 1, 3 do
                "<Cell height='400' width='300'><Panel><Image id='" .. this.color .. "CenterCardsMiddleCard" .. i .. "' image='Back' onClick='playerNightClick(" .. i .. ")' /></Panel></Cell>"
            end
        xmlToAdd = xmlToAdd .. "</Row>" ..
    "</TableLayout>"

    xmlToAdd = xmlToAdd .. "<GridLayout id='" .. this.color .. "PlayerList' class='PlayerList' active='false'>" ..
        "<Text id='" .. this.color .. "PlayerListInstructions' class='PlayerListInstructions'>Default Text</Text>"
        local i = 1
        for color, player in pairs(Game.players) do
            xmlToAdd = xmlToAdd .. "<Panel><Panel id='" .. this.color .. "PlayerList" .. i .. "' class='PlayerListColorPanel' color='" .. color .. "' active='false'><Text id='" .. this.color .. "PlayerList" .. i .. "Text' class='PlayerListColorText'>" .. player.player.steam_name .. "</Text></Panel></Panel>"
            i = i + 1
        end
        xmlToAdd = xmlToAdd .. "<Panel><Panel id='" .. this.color .. "PlayerListExtra' class='PlayerListExtra' active='false'><Text id='" .. this.color .. "PlayerListExtraText' class='PlayerListExtraText'></Text></Panel></Panel>"
    xmlToAdd = xmlToAdd .. "</GridLayout>"

    xmlToAdd = xmlToAdd .. "<TableLayout id='" .. this.color .. "PlayerShow' class='PlayerShow' active='false'>" ..
        "<Row preferredHeight='200'><Cell><Panel><Text id='" .. this.color .. "PlayerShowInstructions' class='PlayerShowInstructions'>Default Text</Text></Panel></Cell></Row>" ..
        "<Row preferredHeight='400'><Cell><Panel><Image id='" .. this.color .. "PlayerShowCard' class='PlayerShowCard' /></Panel></Cell></Row>" ..
        "<Row preferredHeight='100'><Cell><Panel id='" .. this.color .. "PlayerShowButton' class='PlayerShowButton' active='false'><Text id='" .. this.color .. "PlayerShowButtonText' class='PlayerShowButtonText'></Text></Panel></Cell></Row>" ..
    "</TableLayout>"

    return xmlToAdd
end


--Class for all roles in the game
Role = inherit(nil)
Role.name = ""
Role.team = ""
Role.werewolf = false
Role.tanner = false
Role.mason = false
Role.description = ""
Role.color = ""
Role.earlyDoppel = false
Role.prenight = false
Role.prenightTime = -1
Role.selected = false
function Role.generateXml(this)
    return ""
end
function Role.startNightAbility(this)

end
function Role.nightClick(this, value)

end
function Role.endNight(this)

end
function Role.voteAbility(this)

end


--Class for the sentinel role
Sentinel = inherit(Role)
Sentinel.name = "Sentinel"
Sentinel.team = "Village"
Sentinel.description = "Choose one other player to have their card be unable to be looked at or changed."
Sentinel.earlyDoppel = true
Sentinel.prenight = true
Sentinel.prenightTime = 10
Sentinel.protectee = ""
function Sentinel.beginPrenight(this)
	self.UI.setAttribute(this.color .. "PlayerSelector", "visibility", this.color)
	self.UI.setValue(this.color .. "PlayerSelectorInstructions", "Choose another player to protect their role from being changed or viewed.")
end
function Sentinel.nightClick(this, value)
	if this.protectee == "" then
		self.UI.setAttribute(this.color .. "PlayerSelector" .. value, "fontStyle", "Bold")
		this.protectee = value
	elseif value ~= this.protectee then
		self.UI.setAttribute(this.color .. "PlayerSelector" .. value, "fontStyle", "Bold")
		self.UI.setAttribute(this.color .. "PlayerSelector" .. this.protectee, "fontStyle", "None")
		this.protectee = value
	else
		self.UI.setAttribute(this.color .. "PlayerSelector" .. value, "fontStyle", "None")
		this.protectee = ""
	end
end
function Sentinel.endPrenight(this)
	self.UI.setAttribute(this.color .. "PlayerSelector", "visibility", " ")
	if this.protectee == "" then return end

	--Removes ability to interact with sentinel
	for color, player in pairs(Game.players) do
		if color ~= this.protectee or color ~= this.color then
			self.UI.setAttribute(color .. "PlayerSelector" .. this.protectee .. "Sentinel", "visibility", color)
			self.UI.setAttribute(color .. "PlayerSelector" .. this.protectee .. "Panel", "onClick", "")
		end
	end

	--Adds sentinel token to card
	for color, player in pairs(Game.players) do
		Game.players[this.protectee].cardUI.UI.setAttribute(color .. "Sentinel", "visibility", color)
	end

	--Gives person protected status
	Game.players[this.protectee].protected = true
end


--Class for the dopleganger role
Doppelganger = inherit(Role)
Doppelganger.name = "Doppelganger"
Doppelganger.team = "Village"
Doppelganger.description = "The Doppelganger wakes up before everyone else and view another player's role. The Doppelganger is now that role. She is not only on the same team as the role in which she views, but she also gets to do the night action of the card in which she saw."
Doppelganger.prenight = true
Doppelganger.prenightTime = 20
Doppelganger.doppelRole = nil
Doppelganger.doppelState = "SELECTING" --SELECTING, VIEWING, ABILITY
function Doppelganger.beginPrenight(this)
    self.UI.setAttribute(this.color .. "PlayerSelector", "visibility", this.color)
    self.UI.setValue(this.color .. "PlayerSelectorInstructions", "Choose another player to copy the role of.")
end
function Doppelganger.nightClick(this, value)
    if value == this.color then return end
    if this.doppelState == "SELECTING" then
        self.UI.setAttribute(this.color .. "PlayerSelector", "visibility", " ")
        this.doppelRole = Game.players[value].role:class():new()
        this.doppelRole.color = this.color
        this.werewolf = this.doppelRole.werewolf
        this.team = this.doppelRole.team
        this.mason = this.doppelRole.mason
        if this.team == "Tanner" then
            this.team = "doppleTanner"
        end
        Game.players[this.color].endRole = table.clone(this)

        self.UI.setAttribute(this.color .. "PlayerShow", "visibility", this.color)
        local buttonAttributes = {}
        if this.doppelRole.earlyDoppel then
            buttonAttributes = {
                color="Green",
                onValueChanged="playerNightClick('Start')",
                text="Do Ability",
				visibility=this.color
            }
        else
            buttonAttributes = {
                color="Grey",
                onValueChanged=" ",
                text="Do Ability",
				visibility=this.color
            }
        end
        self.UI.setAttributes(this.color .. "PlayerShowButton", buttonAttributes)
        self.UI.setAttribute(this.color .. "PlayerShowCard", "image", this.doppelRole.name .. " Card")
        self.UI.setValue(this.color .. "PlayerShowInstructions", this.doppelRole.description)
        this.doppelState = "VIEWING"
    elseif this.doppelState == "VIEWING" then
        self.UI.setAttribute(this.color .. "PlayerShow", "visibility", " ")
        if this.doppelRole.prenight then
            this.doppelRole.beginPrenight()
        else
            this.doppelRole.startNightAbility()
        end
        this.doppelState = "ABILITY"
    elseif this.doppelState == "ABILITY" then
        this.doppelRole.nightClick(value)
    end
end
function Doppelganger.endPrenight(this)
    if this.doppelState == "SELECTING" then
        self.UI.setAttribute(this.color .. "PlayerSelector", "visibility", " ")
    elseif this.doppelState == "VIEWING" then
        self.UI.setAttribute(this.color .. "PlayerShow", "visibility", " ")
    elseif this.doppelState == "ABILITY" then
        if this.doppelRole.prenight then
            this.doppelRole.endPrenight()
        else
            this.doppelRole.endNight()
        end
    end
end
function Doppelganger.startNightAbility(this)
    if this.doppelRole ~= nil and (not this.doppelRole.earlyDoppel) then
        this.doppelRole.startNightAbility()
        this.doppelState = "ABILITY"
    end
end
function Doppelganger.endNight(this)
    if this.doppelRole ~= nil and (not this.doppelRole.earlyDoppel) then
        this.doppelRole.endNight()
    end
end
function Doppelganger.voteAbility(this)
    if this.doppelRole ~= nil then
        this.doppelRole.voteAbility()
    end
end


--Class for the werewolf role
Werewolf = inherit(Role)
Werewolf.name = "Werewolf"
Werewolf.team = "Werewolves"
Werewolf.werewolf = true
Werewolf.hidden = false;
Werewolf.description = "At night all Werewolves get to view the identities of the other Werewolves. If there is only one Werewolf, the Werewolf may view one center card."
Werewolf.sawMiddle = false
function Werewolf.startNightAbility(this)
    --Gets all werewolves
    local werewolves = {}
    for color in pairs(Game.players) do
        if Game.players[color].role.werewolf and not Game.players[color].role.hidden then
            table.insert(werewolves, Game.players[color])
            if(color ~= this.color) then
				if Game.players[color].role.name == "Dream Wolf" then
					Game.players[color].revealRole(this.color, DreamWolf())
				else
					Game.players[color].revealRole(this.color, Werewolf())
				end
            end
        end
    end

    if arrLength(werewolves) == 1 then
        self.UI.setAttribute(this.color .. "CenterCards", "visibility", this.color)
        self.UI.setValue(this.color .. "CenterCardsInstructions", "You are the only Werewolf. Choose one of the center cards in order to view it.")
    else
        self.UI.setAttribute(this.color .. "PlayerList", "visibility", this.color)
        self.UI.setValue(this.color .. "PlayerListInstructions", "Here is a list of the Werewolves in the game. Protect each other at all costs.")
        for i, player in ipairs(werewolves) do
            local attributes = {
                color=player.color,
                visibility=this.color
            }
            self.UI.setAttributes(this.color .. "PlayerList" .. i, attributes)
            self.UI.setValue(this.color .. "PlayerList" .. i .. "Text", player.player.steam_name)
        end
    end
end
function Werewolf.nightClick(this, value)
    value = tonumber(value)
    if not this.sawMiddle then
        this.sawMiddle = true
        self.UI.setAttribute(this.color .. "CenterCardsMiddleCard" .. value, "image", Game.centerRoles[value].name .. " Card")
        revealCenterCard(this.color, value)
    end
end
function Werewolf.endNight(this)
    self.UI.setAttribute(this.color .. "CenterCards", "visibility", " ")
    self.UI.setAttribute(this.color .. "PlayerList", "visibility", " ")
end


--Class for alpha wolf role
AlphaWolf = inherit(Role)
AlphaWolf.name = "Alpha Wolf"
AlphaWolf.team = "Werewolves"
AlphaWolf.werewolf = true
AlphaWolf.hidden = false;
AlphaWolf.description = "This role causes an additional center card to be added that is always a normal werewolf. The Alpha Wolf knows the other werewolves, and it wakes up afterwards and excahnges the center werewolf card with another player's card."
AlphaWolf.earlyDoppel = true
AlphaWolf.prenight = true
AlphaWolf.prenightTime = 15
AlphaWolf.sawMiddle = false
AlphaWolf.selection = ""
AlphaWolf.werewolves = {}
function AlphaWolf.beginPrenight(this)
	--Gets all werewolves
    for color in pairs(Game.players) do
        if Game.players[color].role.werewolf and not Game.players[color].role.hidden then
            table.insert(this.werewolves, Game.players[color])
            if(color ~= this.color) then
				if Game.players[color].role.name == "Dream Wolf" then
					Game.players[color].revealRole(this.color, DreamWolf())
				else
					Game.players[color].revealRole(this.color, Werewolf())
				end
            end
        end
    end

    if arrLength(this.werewolves) == 1 then
        self.UI.setAttribute(this.color .. "CenterCards", "visibility", this.color)
        self.UI.setValue(this.color .. "CenterCardsInstructions", "You are the only Werewolf. Choose one of the center cards in order to view it.")
    else
        self.UI.setAttribute(this.color .. "PlayerList", "visibility", this.color)
        self.UI.setValue(this.color .. "PlayerListInstructions", "Here is a list of the Werewolves in the game. Protect each other at all costs.")
		self.UI.setValue(this.color .. "PlayerListExtraText", "Look at another player's card:")
		self.UI.setAttribute(this.color .. "PlayerListExtra", "onClick", "playerNightClick(Switch)")
		self.UI.setAttribute(this.color .. "PlayerListExtra", "visibility", this.color)
        for i, player in ipairs(this.werewolves) do
            local attributes = {
                color=player.color,
                visibility=this.color
            }
            self.UI.setAttributes(this.color .. "PlayerList" .. i, attributes)
            self.UI.setValue(this.color .. "PlayerList" .. i .. "Text", player.player.steam_name)
        end
    end

    self.UI.setAttribute(this.color .. "PlayerShowButton", "visibility", this.color)
end
function AlphaWolf.nightClick(this, value)
	if value == "Switch" or value == "continue" then
		if this.sawMiddle then
			self.UI.setAttribute(this.color .. "PlayerShow", "visibility", " ")
		else
			self.UI.setAttribute(this.color .. "PlayerList", "visibility", " ")
		end
		self.UI.setAttribute(this.color .. "PlayerSelector", "visibility", this.color)
        self.UI.setValue(this.color .. "PlayerSelectorInstructions", "Please choose another player for you to turn into a werewolf:")
	elseif arrLength(this.werewolves) == 1 and not this.sawMiddle then
		value = tonumber(value)
		self.UI.setAttribute(this.color .. "CenterCards", "visibility", " ")
		self.UI.setAttribute(this.color .. "PlayerShow", "visibility", this.color)
		self.UI.setValue(this.color .. "PlayerShowInstructions", "Here is the center role that you just viewed:")
		self.UI.setAttribute(this.color .. "PlayerShowButton", "visibility", this.color)
        self.UI.setValue(this.color .. "PlayerShowButtonText", "Look at another player's card:")
		self.UI.setAttribute(this.color .. "PlayerShowCard", "image", Game.centerRoles[value].name .. " Card")
		revealCenterCard(this.color, value)
		this.sawMiddle = true
	else
		if this.selection == "" then
			self.UI.setAttribute(this.color .. "PlayerSelector" .. value, "fontStyle", "Bold")
			this.selection = value
		elseif this.selection == value then
			self.UI.setAttribute(this.color .. "PlayerSelector" .. value, "fontStyle", "None")
			this.selection = ""
		else
			self.UI.setAttribute(this.color .. "PlayerSelector" .. value, "fontStyle", "Bold")
			self.UI.setAttribute(this.color .. "PlayerSelector" .. this.selection, "fontStyle", "None")
			this.selection = value
		end
	end
end
function AlphaWolf.endPrenight(this)
	self.UI.setAttribute(this.color .. "PlayerList", "visibility", " ")
	self.UI.setAttribute(this.color .. "PlayerShow", "visibility", " ")
	self.UI.setAttribute(this.color .. "PlayerSelector", "visibility", " ")
    self.UI.setAttribute(this.color .. "PlayerListExtra", "visibility", " ")

    if this.selection == "" then
        local tempPlayers = {}
        for color, player in pairs(Game.players) do
            if color ~= this.color and (not player.role.werewolf or not player.protected) then
                table.insert(tempPlayers, color)
            end
        end
        local r = math.random(arrLength(tempPlayers))
        this.selection = tempPlayers[r]

        broadcastToColor("You failed to select a player to give the center card, so " .. this.selection .. " was randomly selected!", this.color, "Red")
    end

    Game.players[this.selection].revealRole(this.color, HiddenWolf())
	local temp = table.clone(Game.players[this.selection].endRole)
	Game.players[this.selection].endRole = table.clone(Game.centerRoles[4])
	Game.centerRoles[4] = temp
end
function AlphaWolf.startNightAbility(this)
	self.UI.setAttribute(this.color .. "PlayerList", "visibility", this.color)
	self.UI.setAttribute(this.color .. "PlayerListExtras", "visibility", " ")
	self.UI.setValue(this.color .. "PlayerListInstructions", "Here is a list of the Werewolves in the game. Protect each other at all costs.")
	for i, player in ipairs(this.werewolves) do
		local attributes = {
			color=player.color,
			visibility=this.color
		}
		self.UI.setAttributes(this.color .. "PlayerList" .. i, attributes)
		self.UI.setValue(this.color .. "PlayerList" .. i .. "Text", player.player.steam_name)
    end
end
function AlphaWolf.endNight(this)
    self.UI.setAttribute(this.color .. "PlayerList", "visibility", " ")
end

--Werewolf given by Alpha Wolf
HiddenWolf = inherit(Role)
HiddenWolf.name = "Werewolf"
HiddenWolf.team = "Werewolves"
HiddenWolf.werewolf = true
HiddenWolf.hidden = true;

--Class for mystic wolf role
MysticWolf = inherit(Role)
MysticWolf.name = "Mystic Wolf"
MysticWolf.team = "Werewolves"
MysticWolf.werewolf = true
MysticWolf.hidden = false;
MysticWolf.description = "The Mystic Wolf wakes with the other Werewolves. Afterwards, the Mystic Wolf may look at one other player's card."
MysticWolf.earlyDoppel = true
MysticWolf.middle = -1
MysticWolf.wolfState = "WOLF" --WOLF, MYSTIC
MysticWolf.selection = ""
function MysticWolf.startNightAbility(this)
    --Gets all werewolves
    local werewolves = {}
    for color in pairs(Game.players) do
        if Game.players[color].role.werewolf and not Game.players[color].role.hidden then
            table.insert(werewolves, Game.players[color])
            if(color ~= this.color) then
				if Game.players[color].role.name == "Dream Wolf" then
					Game.players[color].revealRole(this.color, DreamWolf())
				else
					Game.players[color].revealRole(this.color, Werewolf())
				end
            end
        end
    end

    if arrLength(werewolves) == 1 then
        self.UI.setAttribute(this.color .. "CenterCards", "visibility", this.color)
        self.UI.setValue(this.color .. "CenterCardsInstructions", "You are the only Werewolf. Choose one of the center cards in order to view it.")
    else
        self.UI.setAttribute(this.color .. "PlayerList", "visibility", this.color)
        self.UI.setValue(this.color .. "PlayerListInstructions", "Here is a list of the Werewolves in the game. Protect each other at all costs.")
		self.UI.setValue(this.color .. "PlayerListExtraText", "Look at another player's card:")
		self.UI.setAttribute(this.color .. "PlayerListExtra", "onClick", "playerNightClick(Switch)")
		self.UI.setAttribute(this.color .. "PlayerListExtra", "visibility", this.color)
        for i, player in ipairs(werewolves) do
            local attributes = {
                color=player.color,
                visibility=this.color
            }
            self.UI.setAttributes(this.color .. "PlayerList" .. i, attributes)
            self.UI.setValue(this.color .. "PlayerList" .. i .. "Text", player.player.steam_name)
        end
    end
	self.UI.setAttribute(this.color .. "PlayerShowButton", "visibility", this.color)
end
function MysticWolf.nightClick(this, value)
	if this.wolfState == "WOLF" then
		if value == "Switch" or value == "continue" then
			if this.middle ~= -1 then
				if this.selection ~= "" then
					self.UI.setValue(this.color .. "PlayerShowInstructions", "You looked at " .. this.selection .. "'s role, and it is as follows:")
					self.UI.setAttribute(this.color .. "PlayerShowCard", "image", Game.players[this.selection].role.name .. " Card")
				end
				self.UI.setAttribute(this.color .. "PlayerShow", "visibility", " ")
			else
				self.UI.setAttribute(this.color .. "PlayerList", "visibility", " ")
			end

			if this.selection ~= "" then
				self.UI.setAttribute(this.color .. "PlayerShow", "visibility", this.color)
			else
				self.UI.setAttribute(this.color .. "PlayerSelector", "visibility", this.color)
				self.UI.setValue(this.color .. "PlayerSelectorInstructions", "Please select a player to view the card of:")
			end
			this.wolfState = "MYSTIC"
		else
			value = tonumber(value)
			self.UI.setAttribute(this.color .. "CenterCards", "visibility", " ")
			self.UI.setAttribute(this.color .. "PlayerShow", "visibility", this.color)
			self.UI.setValue(this.color .. "PlayerShowInstructions", "Here is the center role that you just viewed:")
			self.UI.setAttribute(this.color .. "PlayerShowCard", "image", Game.centerRoles[value].name .. " Card")
			revealCenterCard(this.color, value)
			this.middle = value
		end
	else
		if value == "Switch" or value == "continue" then
			self.UI.setAttribute(this.color .. "PlayerSelector", "visibility", " ")
            self.UI.setAttribute(this.color .. "PlayerShow", "visibility", " ")
			if this.middle ~= -1 then
				if this.selection ~= "" then
					self.UI.setValue(this.color .. "PlayerShowInstructions", "Here is the center role that you just viewed:")
					self.UI.setAttribute(this.color .. "PlayerShowCard", "image", Game.centerRoles[this.middle].name .. " Card")
				end
				self.UI.setAttribute(this.color .. "PlayerShow", "visibility", this.color)
			else
				self.UI.setAttribute(this.color .. "PlayerList", "visibility", this.color)
			end
			this.wolfState = "WOLF"
		else
			self.UI.setAttribute(this.color .. "PlayerSelector", "visibility", " ")
			self.UI.setAttribute(this.color .. "PlayerShow", "visibility", this.color)
			self.UI.setValue(this.color .. "PlayerShowInstructions", "You looked at " .. value .. "'s role, and it is as follows:")
			self.UI.setAttribute(this.color .. "PlayerShowCard", "image", Game.players[value].role.name .. " Card")
			Game.players[value].revealRole(this.color, Game.players[value].role)
            this.selection = value
		end
	end
end
function MysticWolf.endNight(this)
	self.UI.setAttribute(this.color .. "PlayerShow", "visibility", " ")
	self.UI.setAttribute(this.color .. "PlayerList", "visibility", " ")
	self.UI.setAttribute(this.color .. "PlayerSelector", "visibility", " ")
	self.UI.setAttribute(this.color .. "CenterCards", "visibility", " ")
end


--Class for the minion role
Minion = inherit(Role)
Minion.name = "Minion"
Minion.team = "Werewolves"
Minion.description = "The Minion is on the Werewolf team and gets to view the identities of the Werewolves. The Werewolves do not know the identities of the Minion. If the Minion is voted out at the end of the game, it does not count as a Werewolf getting voted out. If no players are Werewolves, the Minion wins as long as one other player (not the Minion) dies."
function Minion.generateXml(this)
    local xmlToAdd = ""
    xmlToAdd = xmlToAdd .. "<Panel id='Minion' height='500' width='800' visibility=' '><Text color='Red' fontSize='50'>There are no Werewolves! You win if another player is voted out!</Text></Panel>"
    return xmlToAdd
end
function Minion.startNightAbility(this)
    local werewolves = {}
    for color in pairs(Game.players) do
        if Game.players[color].role.werewolf then
            table.insert(werewolves, Game.players[color])
            Game.players[color].revealRole(this.color, Werewolf())
        end
    end
    if arrLength(werewolves) > 0 then
        self.UI.setAttribute(this.color .. "PlayerList", "visibility", this.color)
        self.UI.setValue(this.color .. "PlayerListInstructions", "Here are the werewolves. Keep them alive at all costs.")
        for i, player in ipairs(werewolves) do
            local attributes = {
                color=player.color,
                visibility=this.color
            }
            self.UI.setAttributes(this.color .. "PlayerList" .. i, attributes)
            self.UI.setValue(this.color .. "PlayerList" .. i .. "Text", player.player.steam_name)
        end
    else
        self.UI.setAttribute("Minion", "visibility", this.color)
    end
end
function Minion.endNight(this)
    self.UI.setAttribute("Minion", "visibility", removeFromVisibility("Minion", this.color))
    self.UI.setAttribute(this.color .. "PlayerList", "visibility", " ")
end


--Class for the mason role
Mason = inherit(Role)
Mason.name = "Mason"
Mason.team = "Village"
Mason.description = "The Masons wake up at night and view who the other Mason is, giving the Masons someone to trust."
Mason.mason = true
function Mason.startNightAbility(this)
    local masons = {}
    for color in pairs(Game.players) do
        if Game.players[color].role.mason then
            table.insert(masons, Game.players[color])
            if(color ~= this.color) then
                Game.players[color].revealRole(this.color, Mason())
            end
        end
    end
    self.UI.setAttribute(this.color .. "PlayerList", "visibility", this.color)
    self.UI.setValue(this.color .. "PlayerListInstructions", "The following are you fellow masons, who are people you (think you) can trust.")
    for i, player in ipairs(masons) do
        local attributes = {
            color=player.color,
            visibility=this.color
        }
        self.UI.setAttributes(this.color .. "PlayerList" .. i, attributes)
        self.UI.setValue(this.color .. "PlayerList" .. i .. "Text", player.player.steam_name)
    end
end
function Mason.endNight(this)
    self.UI.setAttribute(this.color .. "PlayerList", "visibility", " ")
end


--Class for the seer role
Seer = inherit(Role)
Seer.name = "Seer"
Seer.team = "Village"
Seer.description = "At night, the Seer may look either at one other player's card or at two of the center cards, but does not move them."
Seer.earlyDoppel = true
Seer.nightState = "Start"
Seer.centerViewed = 0
function Seer.generateXml(this)
    local xmlToAdd = ""

    xmlToAdd = xmlToAdd .. "<GridLayout id='Seer' width='800' height='400' cellSize='800 200' visibility=' '>" ..
        "<Text color='Blue' fontStyle='Bold' fontSize='40'>Choose to either look at the card of another play or two center cards:</Text>" ..
        "<GridLayout cellSize='400 200'>" ..
            "<Panel color='Blue' onClick='playerNightClick(Center)'><Text color='Black' fontSize='30'>Look at two center cards</Text></Panel>" ..
            "<Panel color='Red' onClick='playerNightClick(Player)'><Text color='Black' fontSize='30'>Look at another player's card</Text></Panel>" ..
        "</GridLayout>" ..
    "</GridLayout>"

    return xmlToAdd
end
function Seer.startNightAbility(this)
    self.UI.setAttribute("Seer", "visibility", this.color)
end
function Seer.nightClick(this, value)
    if this.nightState == "Start" then
        if value == "Center" then
            this.nightState = "Center"
            self.UI.setAttribute("Seer", "visibility", " ")
            self.UI.setAttribute(this.color .. "CenterCards", "visibility", this.color)
            self.UI.setValue(this.color .. "CenterCardsInstructions", "Please choose two of the center cards to view:")
        elseif value == "Player" then
            this.nightState = "Players"
            self.UI.setAttribute("Seer", "visibility", " ")
            self.UI.setAttribute(this.color .. "PlayerSelector", "visibility", this.color)
            self.UI.setValue(this.color .. "PlayerSelectorInstructions", "Please choose another player to view their card:")
        end
    elseif this.nightState == "Players" then
        self.UI.setAttribute(this.color .. "PlayerSelector", "visibility", " ")
        self.UI.setAttribute(this.color .. "PlayerShow", "visibility", this.color)
        self.UI.setValue(this.color .. "PlayerShowInstructions", "You looked at " .. value .. "'s role, and it is as follows:")
        self.UI.setAttribute(this.color .. "PlayerShowCard", "image", Game.players[value].role.name .. " Card")
        Game.players[value].revealRole(this.color, Game.players[value].role)
    else
        value = tonumber(value)
        if self.UI.getAttribute(this.color .. "CenterCardsMiddleCard" .. value, "image") == "Back" and this.centerViewed < 2 then
            self.UI.setAttribute(this.color .. "CenterCardsMiddleCard" .. value, "image", Game.centerRoles[value].name .. " Card")
            revealCenterCard(this.color, value)
            this.centerViewed = this.centerViewed + 1
        end
    end
end
function Seer.endNight(this)
    self.UI.setAttribute("Seer", "visibility", " ")
    self.UI.setAttribute(this.color .. "CenterCards", "visibility", " ")
    self.UI.setAttribute(this.color .. "PlayerSelector", "visibility", " ")
    self.UI.setAttribute(this.color .. "PlayerShow", "visibility", " ")
end


--Class for apprentice seer role
ApprenticeSeer = inherit(Role)
ApprenticeSeer.name = "Apprentice Seer"
ApprenticeSeer.team = "Village"
ApprenticeSeer.description = "At night, the apprentice seer may view one of the center roles."
ApprenticeSeer.earlyDoppel = true
ApprenticeSeer.centerViewed = 0
function ApprenticeSeer.startNightAbility(this)
	self.UI.setAttribute(this.color .. "CenterCards", "visibility", this.color)
	self.UI.setValue(this.color .. "CenterCardsInstructions", "Please choose one card to view:")
end
function ApprenticeSeer.nightClick(this, value)
	value = tonumber(value)
	if self.UI.getAttribute(this.color .. "CenterCardsMiddleCard" .. value, "image") == "Back" and this.centerViewed < 1 then
		self.UI.setAttribute(this.color .. "CenterCardsMiddleCard" .. value, "image", Game.centerRoles[value].name .. " Card")
		revealCenterCard(this.color, value)
		this.centerViewed = this.centerViewed + 1
	end
end
function ApprenticeSeer.endNight(this)
	self.UI.setAttribute(this.color .. "CenterCards", "visibility", " ")
end


--Class for paranormal investigator role
PI = inherit(Role)
PI.name = "Paranormal Investigator"
PI.team = "Village"
PI.description = "At night, the Paranormal Investigator may look at up to two other peoples cards. If a werewolf or tanner is viewed, they must stop looking and become a werewolf or tanner, respectively."
PI.earlyDoppel = true
PI.nightState = "Player"
PI.numberLooked = 0
function PI.startNightAbility(this)
	self.UI.setAttribute(this.color .. "PlayerSelector", "visibility", this.color)
	self.UI.setValue(this.color .. "PlayerSelectorInstructions", "Please select a character to view the card of.")
end
function PI.nightClick(this, value)
	if this.nightState == "Player" then
		this.numberLooked = this.numberLooked + 1
		this.nightState = "View"
		self.UI.setAttribute(this.color .. "PlayerSelector", "visibility", " ")
        self.UI.setAttribute(this.color .. "PlayerShow", "visibility", this.color)
        self.UI.setValue(this.color .. "PlayerShowInstructions", "You looked at " .. value .. "'s role, and it is as follows:")
        self.UI.setAttribute(this.color .. "PlayerShowCard", "image", Game.players[value].role.name .. " Card")
        Game.players[value].revealRole(this.color, Game.players[value].role)
		if Game.players[value].role.werewolf then
			this.werewolf = true
			this.team = "Werewolves"
		elseif Game.players[value].role.tanner then
			this.tanner = true
			this.team = "PITanner"
		else
			if this.numberLooked < 2 then
				self.UI.setAttribute(this.color .. "PlayerShowButton", "visibility", this.color)
				self.UI.setAttribute(this.color .. "PlayerSelector" .. value .. "Panel", "visibility", " ")
			end
		end
	else
		if value == "continue" then
			self.UI.setAttribute(this.color .. "PlayerShow", "visibility", " ")
			self.UI.setAttribute(this.color .. "PlayerShowButton", "visibility", " ")
			self.UI.setAttribute(this.color .. "PlayerSelector", "visibility", this.color)
			this.nightState = "Player"
		end
	end
end
function PI.endNight(this)
	self.UI.setAttribute(this.color .. "PlayerSelector", "visibility", " ")
	self.UI.setAttribute(this.color .. "PlayerShow", "visibility", " ")
end


--Class for the robber role
Robber = inherit(Role)
Robber.name = "Robber"
Robber.team = "Village"
Robber.description = "At night, the Robber may choose to rob a card from another player, giving that player their Robber card. The Robber views his new card. The player who receives the Robber card is on the village team. The Robber is on the team of the card he takes, however, he does not do the action of his new role at night."
Robber.earlyDoppel = true
Robber.robbed = ""
function Robber.startNightAbility(this)
    self.UI.setAttribute(this.color .. "PlayerSelector", "visibility", this.color)
    self.UI.setValue(this.color .. "PlayerSelectorInstructions", "Choose another player to steal the role of:")
end
function Robber.nightClick(this, value)
    self.UI.setAttribute(this.color .. "PlayerSelector", "visibility", " ")
    self.UI.setAttribute(this.color .. "PlayerShow", "visibility", this.color)
    self.UI.setValue(this.color .. "PlayerShowInstructions", "You stole " .. value .. "'s role, and here is your new role:")
    self.UI.setAttribute(this.color .. "PlayerShowCard", "image", Game.players[value].role.name .. " Card")

    this.robbed = value

    Game.players[this.color].revealRole(this.color, Game.players[value].role)
    Game.players[value].revealRole(this.color, Game.players[this.color].role)
end
function Robber.endNight(this)
    self.UI.setAttribute(this.color .. "PlayerSelector", "visibility", " ")
    self.UI.setAttribute(this.color .. "PlayerShow", "visibility", " ")

    if this.robbed ~= "" and not this.protected then
        local temp = table.clone(Game.players[this.color].endRole)
        Game.players[this.color].endRole = table.clone(Game.players[this.robbed].endRole)
        Game.players[this.robbed].endRole = temp
    end
end


--Class for the witch role
Witch = inherit(Role)
Witch.name  = "Witch"
Witch.team = "Village"
Witch.description = "At night, the Witch may view a card from the center and then must give it to any player of their choice."
Witch.earlyDoppel = true
Witch.nightPhase = "Center"
Witch.centerCard = -1
Witch.witchee = ""
function Witch.startNightAbility(this)
	self.UI.setAttribute(this.color .. "CenterCards", "visibility", this.color)
	self.UI.setValue(this.color .. "CenterCardsInstructions", "Choose another a center role to view:")
	self.UI.setAttribute(this.color .. "PlayerSelector" .. this.color .. "Panel", "visibility", this.color)
end
function Witch.nightClick(this, value)
	if this.nightPhase == "Center" then
		this.nightPhase = "View"
		value = tonumber(value)
		this.centerCard = value
		self.UI.setAttribute(this.color .. "CenterCards", "visibility", " ")
		self.UI.setAttribute(this.color .. "PlayerShow", "visibility", this.color)
		self.UI.setValue(this.color .. "PlayerShowInstructions", "Here is the center role that you just viewed:")
		self.UI.setAttribute(this.color .. "PlayerShowCard", "image", Game.centerRoles[value].name .. " Card")
		self.UI.setAttribute(this.color .. "PlayerShowButton", "visibility", this.color)
	elseif this.nightPhase == "View" then
		if value == "continue" then
			this.nightPhase = "Player"
			self.UI.setAttribute(this.color .. "PlayerShow", "visibility", " ")
			self.UI.setAttribute(this.color .. "PlayerShowButton", "visibility", " ")
			self.UI.setAttribute(this.color .. "PlayerSelector", "visibility", this.color)
			self.UI.setValue(this.color .. "PlayerSelectorInstructions", "Please choose a player to give the role of " .. Game.centerRoles[this.centerCard].name)
		end
	elseif this.nightPhase == "Player" then
		this.nightPhase = "End"
		this.witchee = value
		self.UI.setAttribute(this.color .. "PlayerSelector", "visibility", " ")
		self.UI.setAttribute(this.color .. "PlayerShow", "visibility", this.color)
		self.UI.setValue(this.color .. "PlayerShowInstructions", "You gave the following role to " .. value .. ":")
		Game.players[value].revealRole(this.color, Game.centerRoles[this.centerCard])
	end
end
function Witch.endNight(this)
	self.UI.setAttribute(this.color .. "CenterCards", "visibility", " ")
	self.UI.setAttribute(this.color .. "PlayerShow", "visibility", " ")
	self.UI.setAttribute(this.color .. "PlayerSelector", "visibility", " ")

	if this.centerCard ~= -1 then
		if this.witchee == "" then
			local tempPlayers = {}
			for color in pairs(Game.players) do
				table.insert(tempPlayers, color)
			end
			local r = math.random(1, arrLength(tempPlayers))
			this.witchee = tempPlayers[r]

			broadcastToColor("You failed to select a player to give the center card, so " .. this.witchee .. " was randomly selected!", this.color, "Red")
		end

		local temp = table.clone(Game.players[this.witchee].endRole)
		Game.players[this.witchee].endRole = table.clone(Game.centerRoles[this.centerCard])
		Game.centerRoles[this.centerCard] = temp
    end
end


--Class for the troublemaker role
Troublemaker = inherit(Role)
Troublemaker.name = "Troublemaker"
Troublemaker.team = "Village"
Troublemaker.description = "At night, the Troublemaker may switch the cards of two other players without looking at those cards. The players who recieve a different card are now the role (and team) of their new card, even though they don't know what role that is until the end of the game. The Troublemaker is on the village team."
Troublemaker.earlyDoppel = true
Troublemaker.selection1 = ""
Troublemaker.selection2 = ""
function Troublemaker.startNightAbility(this)
    self.UI.setAttribute(this.color .. "PlayerSelector", "visibility", this.color)
    self.UI.setValue(this.color .. "PlayerSelectorInstructions", "Please choose two people's cards to swap:")
end
function Troublemaker.nightClick(this, value)
    if this.selection1 == "" then
        this.selection1 = value
        self.UI.setAttribute(this.color .. "PlayerSelector" .. value, "fontStyle", "Bold")
    elseif this.selection1 == value then
        this.selection1 = this.selection2
        this.selection2 = ""
        self.UI.setAttribute(this.color .. "PlayerSelector" .. value, "fontStyle", "None")
    elseif this.selection2 == "" then
        this.selection2 = value
        self.UI.setAttribute(this.color .. "PlayerSelector" .. value, "fontStyle", "Bold")
    elseif this.selection2 == value then
        this.selection2 = ""
        self.UI.setAttribute(this.color .. "PlayerSelector" .. value, "fontStyle", "None")
    end
end
function Troublemaker.endNight(this)
    self.UI.setAttribute(this.color .. "PlayerSelector", "visibility", " ")

    if this.selection1 ~= "" and this.selection2 ~= "" then
        local temp = table.clone(Game.players[this.selection1].endRole)
        Game.players[this.selection1].endRole = table.clone(Game.players[this.selection2].endRole)
        Game.players[this.selection2].endRole = temp
    end
end

--Class for the village idiot role
VillageIdiot = inherit(Role)
VillageIdiot.name = "Village Idiot"
VillageIdiot.team = "Village"
VillageIdiot.description = "At night, choose to either rotate all other player's cards to the left or to the right."
VillageIdiot.earlyDoppel = true
VillageIdiot.direction = ""
 function VillageIdiot.generateXml(this)
    local xmlToAdd = ""

    xmlToAdd = xmlToAdd .. "<GridLayout id='" .. this.color .. "VillageIdiot' width='800' height='400' cellSize='800 200' visibility=' '>" ..
        "<Text color='Blue' fontStyle='Bold' fontSize='40'>Choose a direction to rotate every other players card in:</Text>" ..
        "<GridLayout cellSize='400 200'>" ..
            "<Panel id='" .. this.color .. "VillageIdiotLeft' color='Blue' onClick='playerNightClick(Left)'><Text id='" .. this.color .. "VillageIdiotLeftText' color='Black' fontSize='30'>Left</Text></Panel>" ..
            "<Panel id='" .. this.color .. "VillageIdiotRight' color='Red' onClick='playerNightClick(Right)'><Text id='" .. this.color .. "VillageIdiotRightText' color='Black' fontSize='30'>Right</Text></Panel>" ..
        "</GridLayout>" ..
    "</GridLayout>"

    return xmlToAdd
end
function VillageIdiot.startNightAbility(this)
	self.UI.setAttribute(this.color .. "VillageIdiot", "visibility", this.color)
end
function VillageIdiot.nightClick(this, value)
	if this.direction == "" then
		self.UI.setAttribute(this.color .. "VillageIdiot" .. value .. "Text", "fontStyle", "Bold")
		this.direction = value
	elseif value ~= this.direction then
		self.UI.setAttribute(this.color .. "VillageIdiot" .. value .. "Text", "fontStyle", "Bold")
		self.UI.setAttribute(this.color .. "VillageIdiot" .. this.direction .. "Text", "fontStyle", "None")
		this.direction = value
	else
		self.UI.setAttribute(this.color .. "VillageIdiot" .. value .. "Text", "fontStyle", "None")
		this.direction = ""
	end
end
function VillageIdiot.endNight(this)
	self.UI.setAttribute(this.color .. "VillageIdiot", "visibility", " ")

	local colorOrder = {}
	for i in ipairs(Player.getColors()) do
		local color = Player.getColors()[i]
		if Game.players[color] ~= nil and color ~= this.color then
			table.insert(colorOrder, color)
		end
	end

	if this.direction == "Left" then
		local firstRole = Game.players[colorOrder[1]].endRole
		for i in ipairs(colorOrder) do
			if i ~= arrLength(colorOrder) then
				Game.players[colorOrder[i]].endRole = Game.players[colorOrder[i + 1]].endRole
			else
				Game.players[colorOrder[i]].endRole = firstRole
			end
		end
	else
		local prevRole = Game.players[colorOrder[arrLength(colorOrder)]].endRole
		for i in ipairs(colorOrder) do
			local temp = Game.players[colorOrder[i]].endRole
			Game.players[colorOrder[i]].endRole = prevRole
			prevRole = temp
		end
	end
end


--Class for the drunk role
Drunk = inherit(Role)
Drunk.name = "Drunk"
Drunk.team = "Village"
Drunk.description = "The Drunk is so drunk that he doesn't remember his role. When it comes time to wake up at night, he must exchange his Drunk card for any card in the center, but he does not look at it. The Drunk is now the new role in front of him (even though he doesn't know what that new role is) and is on that team."
Drunk.earlyDoppel = true
Drunk.selection = 0
function Drunk.startNightAbility(this)
    self.UI.setAttribute(this.color .. "CenterCards", "visibility", this.color)
    self.UI.setValue(this.color .. "CenterCardsInstructions", "Please choose a card to randomly swap your card with:")
    for i = 1, 3 do
        self.UI.setAttribute(this.color .. "CenterCardsMiddleCard" .. i, "color", "#808080")
    end
end
function Drunk.nightClick(this, value)
    value = tonumber(value)
    if this.selection == 0 then
        this.selection = value
        self.UI.setAttribute(this.color .. "CenterCardsMiddleCard" .. value, "color", "#FFFFFF")
    elseif value ~= this.selection then
        self.UI.setAttribute(this.color .. "CenterCardsMiddleCard" .. this.selection, "color", "#808080")
        this.selection = value
        self.UI.setAttribute(this.color .. "CenterCardsMiddleCard" .. value, "color", "#FFFFFF")
    end
end
function Drunk.endNight(this)
    self.UI.setAttribute(this.color .. "CenterCards", "visibility", " ")
	if this.protected then return end
    if this.selection == 0 then
		this.selection = math.random(1, 3)
		broadcastToColor("You failed to select a center card to swap with, so a center card was chosen for you!", this.color, "Red")
	end

	local temp = table.clone(Game.centerRoles[this.selection])
	Game.centerRoles[this.selection] = table.clone(Game.players[this.color].endRole)
	Game.players[this.color].endRole = temp

	revealCenterCard(this.color, this.selection)
	Game.players[this.color].cardUI.UI.setAttribute(this.color .. "Image", "image", "Back")
end


--Class for the insomniac role
Insomniac = inherit(Role)
Insomniac.name = "Insomniac"
Insomniac.team = "Village"
Insomniac.description = "The Insomniac wakes up and looks at her card (to see if it has changed)."
function Insomniac.endNight(this)
	if this.protected then return end
    Game.players[this.color].revealRole(this.color, Game.players[this.color].endRole)
end


--Class for the revealer role
Revealer = inherit(Role)
Revealer.name = "Revealer"
Revealer.team = "Village"
Revealer.description = "The revealer reveals the card of one player to all other players, unless it is a werewolf or a tanner."
Revealer.selection = ""
function Revealer.startNightAbility(this)
    self.UI.setAttribute(this.color .. "PlayerSelector", "visibility", this.color)
    self.UI.setValue(this.color .. "PlayerSelectorInstructions", "Choose another player to have their role revealed:")
end
function Revealer.nightClick(this, value)
    if this.selection == "" then
        self.UI.setAttribute(this.color .. "PlayerSelector" .. value, "fontStyle", "Bold")
		this.selection = value
    elseif this.selection == value then
		self.UI.setAttribute(this.color .. "PlayerSelector" .. value, "fontStyle", "None")
		this.selection = ""
	else
		self.UI.setAttribute(this.color .. "PlayerSelector" .. value, "fontStyle", "Bold")
		self.UI.setAttribute(this.color .. "PlayerSelector" .. this.selection, "fontStyle", "None")
		this.selection = value
	end
end
function Revealer.endNight(this)
    self.UI.setAttribute(this.color .. "PlayerSelector", "visibility", " ")

	if this.selection ~= "" and not ((Game.players[this.selection].endRole.werewolf or Game.players[this.selection].endRole.tanner) and not (Game.players[this.selection].endRole.name == "Doppelganger" or Game.players[this.selection].endRole.name == "Paranormal Investigator")) then
		for color in pairs(Game.players) do
			Game.players[this.selection].revealRole(color, Game.players[this.selection].endRole)
		end
        Game.players[this.color].player.broadcast("You have revealed " .. this.selection .. "'s role to the rest of the table!'", "Green")
        Game.players[this.selection].player.broadcast("Your role has been revealed to the table!", "Green")
	elseif this.selection ~= "" then
        Game.players[this.selection].revealRole(this.color, Game.players[this.selection].endRole)
        Game.players[this.color].player.broadcast("You attempted to reveal the role of " .. this.selection .. ", but they were too evil for you to reveal them.", "Red")
    end
end


--Class for the villager role
Villager = inherit(Role)
Villager.name = "Villager"
Villager.team = "Village"
Villager.description = "The Villager has no special abilities, but he is definitely not a werewolf."


--Class for the hunter role
Hunter = inherit(Role)
Hunter.name = "Hunter"
Hunter.team = "Village"
Hunter.description = "If the Hunter dies, the player he is pointing at dies as well (regardless of how many votes his target recieves)."
function Hunter.voteAbility(this)
    local dead = false
    local voteDead = false
    for i, color in ipairs(Game.dead) do
        if color == this.color then
            dead = true
        elseif color == Game.players[this.color].vote then
            voteDead = true
        end
    end
    if dead and not voteDead then
        table.insert(Game.dead, Game.players[this.color].vote)
    end
end


--Class for the tanner role
Tanner = inherit(Role)
Tanner.name = "Tanner"
Tanner.team = "Tanner"
Tanner.tanner = true
Tanner.description = "The Tanner hates his job so much that he wants to die. The Tanner only wins if he dies. If the Tanner dies and no Werewolves die, the Werewolves do not win. If the Tanner dies and a Werewolf also dies, the village team wins too. The Tanner is considered a member of the village (but is not on their team), so if the Tanner dies when all werewolves are in the center, the village team loses."


--Class for the dream wolf class
DreamWolf = inherit(Role)
DreamWolf.name = "Dream Wolf"
DreamWolf.team = "Werewolves"
DreamWolf.werewolf = true
DreamWolf.description = "The dream wolf is a werewolf that does not get to know the identity of the other werewolves."


--Class for the bodyguard class
BodyGuard = inherit(Role)
BodyGuard.name = "Bodyguard"
BodyGuard.team = "Village"
BodyGuard.description = "The person who the bodyguard votes for cannot be voted out."
function BodyGuard.voteAbility(this)
    local voteDead = false
	local votePosition = -1
	for i, color in ipairs(Game.dead) do
		if color == Game.players[this.color].vote then
			voteDead = true
			votePosition = i
		end
	end
	if voteDead then
		if arrLength(Game.dead) > 1 then
			table.remove(Game.dead, votePosition)
		else
			local highestVotes = {}
			local highestVote = -1
			for color, votes in pairs(Game.votes) do
				if color ~= Game.players[this.color].vote then
					if votes > highestVote then
						highestVotes = {}
						highestVote = votes
						table.insert(highestVotes, color)
					elseif votes == highestVote then
						table.insert(highestVotes, color)
					end
				end
			end
			Game.dead = highestVotes
		end
	end
end
